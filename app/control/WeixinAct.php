<?php
namespace app\control;

use common\Weixin;
use common\weixin\RedisQRCode;
use Endroid\QrCode\QrCodeInterface;
use myphp\Log;

/**
 * 通用微信公众号处理
 * Class WeixinAct
 * @package app\control
 */
class WeixinAct extends \myphp\Control{
    /**
     * @var string 公众号配置名
     */
    private $name = Weixin::WX_CFG;

    public function _before()
    {
        $this->name = $_GET['name']??Weixin::WX_CFG;
        Log::Dir('wx');
        Log::write($this->request::uri(), $this->name);
        Log::write($_GET, 'get');
        Log::write($this->request->rawBody(), 'body');
        return parent::_before(); // TODO: Change the autogenerated stub
    }

    public function push(){
        if ($this->request::isGet()) {
            $app = Weixin::getApp($this->name);
            $app->server->forceValidate()->validate();
            return self::html($_GET['echostr'] ?? '');
        }
        if (strpos($this->request->rawBody(), 'TEMPLATESENDJOBFINISH')) {
            return 'SUCCESS';
        }
        runtime(1);
        runtime(1, 'app');
        $app = Weixin::getApp($this->name);
        runtime(0, 'app');
        runtime(1, 'push');
        $app->server->push(function($message) {
            switch ($message['MsgType']) {
                case 'event':
                    return $this->eventHandler($message);
                    break;
                case 'text':
                    //return '收到文字消息';
                    //break;
                case 'image ':
                    //return '收到图片消息';
                    //break;
                case 'voice':
                    //return '收到语音消息';
                    //break;
                case 'video':
                    //return '收到视频消息';
                    //break;
                case 'location':
                    //return '收到坐标消息';
                    //break;
                case 'link':
                    //return '收到链接消息';
                    //break;
                case 'file':
                    //return '收到文件消息';
                // ... 其它消息
                default:
                    return "SUCCESS";
            }
        });
        runtime(0, 'push');
        runtime(1, 'send');
        $wxResponse = $app->server->serve();
        foreach ($wxResponse->headers->allPreserveCase() as $name => $values) {
            $this->response->withHeader($name, $values);
        }
        $this->response->setStatusCode($wxResponse->getStatusCode());
        runtime(0, 'send');
        Log::write(runtime(0), 'runtime');
        return $wxResponse->getContent();
    }

    private function eventHandler($message)
    {
        toLog($message);
        //$openid = $message['FromUserName'];
        $result = 'success';
        // 事件类型
        switch (strtolower(trim($message["Event"]))) {
            case 'subscribe': // 关注
                // 手机微信扫码
                $sceneVal = (string)$message['EventKey'];
                //qrscene_场景值 扫码关注
                if(strpos($sceneVal, 'qrscene_')===0){
                    $sceneVal = substr($sceneVal, 8);
                }

                $result = $this->handler($sceneVal, $message);
                break;
            case 'scan':
                $sceneVal = (string)$message['EventKey'];
                $result = $this->handler($sceneVal, $message);
                break;
            case 'unsubscribe':
                $result = '已取消关注';
                break;
            case 'click':
            case 'location':
                break;
        }
        return $result;
    }

    private function handler($sceneVal, $message=[]){
        if (is_numeric($sceneVal)) {
            //二维码处理事件数据
            $qrClass = new RedisQRCode($this->name);
            $sceneId = (int)$sceneVal;
            $result = $this->sceneIdHandler($sceneId, $message, $qrClass);
        } else {
            $result = $this->sceneHandler($sceneVal, $message);
        }
        return $result;
    }

    /**
     * @param string $sceneVal
     * @param array $message
     * @return string|null
     */
    private function sceneHandler($sceneVal, $message=[]){
        if ($sceneVal === '') return 'success';
        $openid = $message['FromUserName'];
        $sceneData = explode(',', $sceneVal);
        switch ($sceneData[0]){
            case 'staffBind':
                $key = $sceneData[1];//Q('key{64}');
                $url = apiUrl('/login/weixin?key=' . $key . '&act=staff');
                $msg = '请点击【<a href="'.$url.'">确认授权</a>】，请进行授权绑定操作。';
                return $msg;
        }
        return null;
    }

    /**
     * @param int $sceneId
     * @param array $message
     * @param RedisQRCode|QrCodeInterface $qrClass
     * @return string
     */
    private function sceneIdHandler($sceneId, $message, $qrClass)
    {
        if ( empty($sceneId) ) {
            return "搜索关注". toJson($message);
        }
        $openid = $message['FromUserName'];
        $failMsg = '【'.$sceneId.'】二维码已失效，请重新刷新扫码';
        //todo 通过$sceneId获取二维码数据
        //二维码处理事件数据

        $qrCodeLogRet = $qrClass->read($sceneId);
        if (!$qrCodeLogRet) {
            return $failMsg;
        }
        if (!isset($qrCodeLogRet['type'])) $qrCodeLogRet['type'] = 0;

        $isTmForeverQr = substr($sceneId,0, 2)=='fe';
        if($isTmForeverQr){ #永久二维码  模拟数据
            //todo
        }

        if ($qrCodeLogRet['type'] == 100) { #限时5秒不允许重复
            if (!redisLockOnce('qr100:' . $sceneId, 5)) {
                return '';
            }
        }

        $openid = $message["FromUserName"];
        $okMsg = '扫码成功';
        switch ( $qrCodeLogRet['type'] ) {
            case 100:
                //todo
                break;

        }
        $qrClass->done($sceneId);
        return $okMsg;
    }

    //生成菜单
    public function menu(){
        $cfg = Q('name', Weixin::WX_CFG);
        $buttons = json_decode(Q('buttons'), true);
        if (!$buttons) {
            $buttons = [
                [
                    "type" => "view",
                    "name" => "磁盘管理",
                    "url" => 'https://a.yunqidong.com/gzh/'
                ]
            ];
        }

        try {
            $ret = Weixin::getApp($cfg)->menu->create($buttons);
            return self::ok($ret);
        } catch (\Exception $e) {
            return self::fail($e->getMessage());
        }
    }
}